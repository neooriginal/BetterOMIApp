<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %> - GenOmi</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
  <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
  <!-- Navigation -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container">
      <a class="navbar-brand" href="/">GenOmi</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ms-auto">
          <li class="nav-item">
            <a class="nav-link" href="/action-items">Action Items</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/memories">Memories</a>
          </li>
          <li class="nav-item">
            <a class="nav-link active" href="/transcriptions">Transcriptions</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/brain">Brain</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <div class="container py-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <div>
        <a href="/memories" class="btn btn-outline-secondary mb-2">
          <i class="bi bi-arrow-left"></i> Back to Memories
        </a>
        <h1 class="mb-0"><%= memory.title %></h1>
      </div>
      <div>
        <button class="btn btn-outline-primary me-2" onclick="editMemory(<%= memory.id %>)">
          <i class="bi bi-pencil"></i> Edit
        </button>
        <button class="btn btn-outline-danger" onclick="deleteMemory(<%= memory.id %>)">
          <i class="bi bi-trash"></i> Delete
        </button>
      </div>
    </div>

    <div class="card shadow-sm mb-4">
      <div class="card-header d-flex justify-content-between align-items-center">
        <span class="text-muted">
          <i class="bi bi-calendar"></i> Created: <%= new Date(memory.created_at).toLocaleString() %>
        </span>
        <span class="badge bg-<%= memory.importance >= 4 ? 'danger' : (memory.importance >= 3 ? 'warning' : 'info') %>">
          Importance: <%= memory.importance %>
        </span>
      </div>
      <div class="card-body">
        <p class="memory-content"><%= memory.content %></p>
      </div>
      <div class="card-footer">
        <div class="d-flex justify-content-between align-items-center">
          <% if (memory.expires_at) { %>
            <span class="text-muted">
              <i class="bi bi-hourglass"></i> Expires: <%= new Date(memory.expires_at).toLocaleString() %>
            </span>
          <% } else { %>
            <span class="text-success">
              <i class="bi bi-pin"></i> Permanent Memory
            </span>
          <% } %>
        </div>
      </div>
    </div>
    
    <!-- Transcription Section -->
    <div class="mt-4 mb-4">
      <h3>Original Transcription</h3>
      <div id="sourceTranscription">
        <div class="text-center p-4">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
          <p class="mt-2">Loading transcription...</p>
        </div>
      </div>
    </div>

    <div class="mt-4">
      <h3>Related Memories</h3>
      <div class="row" id="relatedMemories">
        <div class="col-12">
          <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Finding related memories...</p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Edit Memory Modal -->
  <div class="modal fade" id="editMemoryModal" tabindex="-1" aria-labelledby="editMemoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editMemoryModalLabel">Edit Memory</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="editMemoryForm">
            <input type="hidden" id="editMemoryId" value="<%= memory.id %>">
            <div class="mb-3">
              <label for="editTitle" class="form-label">Title</label>
              <input type="text" class="form-control" id="editTitle" value="<%= memory.title %>" required>
            </div>
            <div class="mb-3">
              <label for="editContent" class="form-label">Content</label>
              <textarea class="form-control" id="editContent" rows="6" required><%= memory.content %></textarea>
            </div>
            <div class="row mb-3">
              <div class="col-md-6">
                <label for="editImportance" class="form-label">Importance</label>
                <select class="form-select" id="editImportance">
                  <option value="1" <%= memory.importance == 1 ? 'selected' : '' %>>1 (Low)</option>
                  <option value="2" <%= memory.importance == 2 ? 'selected' : '' %>>2</option>
                  <option value="3" <%= memory.importance == 3 ? 'selected' : '' %>>3 (Medium)</option>
                  <option value="4" <%= memory.importance == 4 ? 'selected' : '' %>>4</option>
                  <option value="5" <%= memory.importance == 5 ? 'selected' : '' %>>5 (High)</option>
                </select>
              </div>
              <div class="col-md-6">
                <label for="editExpiration" class="form-label">Expiration</label>
                <div class="d-flex">
                  <select class="form-select me-2" id="editExpirationType">
                    <option value="permanent" <%= !memory.expires_at ? 'selected' : '' %>>Permanent</option>
                    <option value="temporary" <%= memory.expires_at ? 'selected' : '' %>>Temporary</option>
                  </select>
                  <input type="date" class="form-control" id="editExpirationDate" <%= !memory.expires_at ? 'disabled' : '' %> 
                    value="<%= memory.expires_at ? new Date(memory.expires_at).toISOString().split('T')[0] : '' %>">
                </div>
              </div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="updateMemory">Update</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Footer -->
  <footer class="py-4 bg-dark">
    <div class="container">
      <p class="m-0 text-center text-white">
        &copy; 2025 GenOmi Brain Memory System
      </p>
    </div>
  </footer>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Expiration type toggle
    document.getElementById('editExpirationType').addEventListener('change', function() {
      const expirationDate = document.getElementById('editExpirationDate');
      if (this.value === 'temporary') {
        expirationDate.disabled = false;
        
        // If no date already set, set default to 30 days from now
        if (!expirationDate.value) {
          const date = new Date();
          date.setDate(date.getDate() + 30);
          expirationDate.value = date.toISOString().split('T')[0];
        }
      } else {
        expirationDate.disabled = true;
      }
    });
    
    // Edit memory
    function editMemory(id) {
      new bootstrap.Modal(document.getElementById('editMemoryModal')).show();
    }
    
    // Update memory
    document.getElementById('updateMemory').addEventListener('click', async () => {
      const id = document.getElementById('editMemoryId').value;
      const title = document.getElementById('editTitle').value.trim();
      const content = document.getElementById('editContent').value.trim();
      
      if (!title || !content) return;
      
      const importance = document.getElementById('editImportance').value;
      const expirationType = document.getElementById('editExpirationType').value;
      const expirationDate = document.getElementById('editExpirationDate').value;
      
      let expires_at = null;
      if (expirationType === 'temporary' && expirationDate) {
        expires_at = expirationDate;
      }
      
      try {
        const response = await fetch(`/memories/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            title,
            content,
            importance,
            expires_at
          })
        });
        
        if (response.ok) {
          window.location.reload();
        } else {
          alert('Error updating memory');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error updating memory');
      }
    });
    
    // Delete memory
    function deleteMemory(id) {
      if (confirm('Are you sure you want to delete this memory?')) {
        fetch(`/memories/${id}`, {
          method: 'DELETE'
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              window.location.href = '/memories';
            } else {
              alert('Error deleting memory');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Error deleting memory');
          });
      }
    }
    
    // Find related memories
    document.addEventListener('DOMContentLoaded', async () => {
      try {
        const response = await fetch(`/memories/api/related/${<%= memory.id %>}`);
        if (response.ok) {
          const data = await response.json();
          
          const relatedMemoriesEl = document.getElementById('relatedMemories');
          
          if (data.success && data.memories && data.memories.length > 0) {
            let html = '';
            
            data.memories.forEach(memory => {
              html += `
                <div class="col-md-4 mb-4">
                  <div class="card h-100 memory-card shadow-sm">
                    <div class="card-header d-flex justify-content-between align-items-center">
                      <h5 class="card-title mb-0">${memory.title}</h5>
                      <span class="badge bg-${memory.importance >= 4 ? 'danger' : (memory.importance >= 3 ? 'warning' : 'info')} memory-importance">
                        ${memory.importance}
                      </span>
                    </div>
                    <div class="card-body">
                      <p class="card-text memory-content">${memory.content.length > 100 ? memory.content.substring(0, 100) + '...' : memory.content}</p>
                    </div>
                    <div class="card-footer bg-transparent text-center">
                      <a href="/memories/${memory.id}" class="btn btn-sm btn-outline-primary">View</a>
                    </div>
                  </div>
                </div>
              `;
            });
            
            relatedMemoriesEl.innerHTML = html;
          } else {
            relatedMemoriesEl.innerHTML = `
              <div class="col-12">
                <div class="alert alert-info">
                  No related memories found.
                </div>
              </div>
            `;
          }
        } else {
          throw new Error('Failed to fetch related memories');
        }
      } catch (error) {
        console.error('Error fetching related memories:', error);
        document.getElementById('relatedMemories').innerHTML = `
          <div class="col-12">
            <div class="alert alert-warning">
              Error loading related memories.
            </div>
          </div>
        `;
      }
    });
    
    // Load source transcription
    document.addEventListener('DOMContentLoaded', function() {
      const memoryId = <%= memory.id %>;
      
      // Fetch transcription that created this memory
      fetch(`/transcriptions/memory/${memoryId}`)
        .then(response => response.json())
        .then(data => {
          const transcriptionsContainer = document.getElementById('sourceTranscription');
          
          if (data.success && data.transcriptions && data.transcriptions.length > 0) {
            const transcription = data.transcriptions[0];
            
            // Check if the transcription has expired
            const expiresAt = new Date(transcription.expires_at);
            const now = new Date();
            
            if (expiresAt > now) {
              // Render transcription card
              transcriptionsContainer.innerHTML = 
                '<div class="card shadow-sm">' +
                  '<div class="card-header d-flex justify-content-between align-items-center">' +
                    '<span class="text-muted">' +
                      '<i class="bi bi-mic"></i> Recorded: ' + new Date(transcription.created_at).toLocaleString() +
                    '</span>' +
                    '<span class="badge bg-secondary">' +
                      '<i class="bi bi-clock"></i> Expires: ' + new Date(transcription.expires_at).toLocaleString() +
                    '</span>' +
                  '</div>' +
                  '<div class="card-body">' +
                    '<p>' + transcription.text + '</p>' +
                  '</div>' +
                '</div>';
            } else {
              // Transcription expired
              transcriptionsContainer.innerHTML = 
                '<div class="alert alert-secondary">' +
                  '<i class="bi bi-clock-history"></i> The original transcription has expired.' +
                '</div>';
            }
          } else {
            // No transcription found
            transcriptionsContainer.innerHTML = 
              '<div class="alert alert-info">' +
                '<i class="bi bi-info-circle"></i> No source transcription found for this memory.' +
              '</div>';
          }
        })
        .catch(error => {
          console.error('Error fetching transcription:', error);
          document.getElementById('sourceTranscription').innerHTML = 
            '<div class="alert alert-danger">' +
              '<i class="bi bi-exclamation-triangle"></i> Error loading transcription data.' +
            '</div>';
        });
    });
  </script>
</body>
</html> 